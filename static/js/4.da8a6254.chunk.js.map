{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/Dialogs.tsx","hoc/withAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","Dialogs","props","dialogs","dialogsPage","curDlg","currentDialog","curDlgBlock","React","useRef","sendMsgBtn","createRef","newMsgField","enterKeyDown","onSendMsg","msgTextField","current","sendMsg","value","focus","onEnterKeyDown","e","code","disabled","document","activeElement","preventDefault","setTimeout","onEnterKeyUp","useEffect","addEventListener","useLayoutEffect","scrollTop","scrollHeight","onSetCurDlg","dlg","currentTarget","textContent","setCurDlg","DialogItem","path","id","className","classes","dialog","to","activeClassName","active","onClick","src","ava","dialog__img","name","dialogsBlock","map","Msg","style","outgoing","incoming","msgs","MsgElements","filter","msg","text","out","Messages","messages","ref","EmptyMessagesDiv","fullHeightMessages","noDlg","MessageItems","render","component","messagesBlock","DialogForm","initialValues","msgText","onSubmit","values","setSubmitting","resetForm","console","log","handleChange","errors","touched","handleBlur","isSubmitting","handleSubmit","writeMsg","placeholder","onChange","onBlur","startsWith","writeMsgText","autoFocus","type","writeMsgBtn","match","commonWrap","dialogsWrap","messagesWrap","mapStatetoPropsForRedirect","state","isAuth","auth","compose","connect","sendMessageAC","setCurrentDialogAC","Component","restProps"],"mappings":"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","file":"static/js/4.da8a6254.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"commonWrap\":\"Dialogs_commonWrap__2vYTk\",\"dialogsWrap\":\"Dialogs_dialogsWrap__BSdra\",\"dialogs\":\"Dialogs_dialogs__1I3Ut\",\"dialog\":\"Dialogs_dialog__2ahLy\",\"active\":\"Dialogs_active__3xG4Q\",\"dialog__img\":\"Dialogs_dialog__img__x1-Fj\",\"messagesWrap\":\"Dialogs_messagesWrap__2VqBb\",\"writeMsg\":\"Dialogs_writeMsg__KqPRz\",\"writeMsgText\":\"Dialogs_writeMsgText__2eYY2\",\"writeMsgBtn\":\"Dialogs_writeMsgBtn__sFsG3\",\"messages\":\"Dialogs_messages__3rDHn\",\"fullHeightMessages\":\"Dialogs_fullHeightMessages__1STKv\",\"outgoing\":\"Dialogs_outgoing__1p9tq\",\"incoming\":\"Dialogs_incoming__VBKpg\",\"noDlg\":\"Dialogs_noDlg__25ZAv\"};","import React, { useState, useEffect, MouseEvent, useLayoutEffect } from 'react';\r\nimport classes from './Dialogs.module.css';\r\nimport { Redirect, Route, NavLink } from 'react-router-dom';\r\nimport { Formik } from 'formik';\r\nimport { DialogType } from '../../redux/types/types';\r\n\r\n\r\n// curDlg обнулять через useEffect\r\n\r\ntype PropsType = {\r\n\tdialogsPage: Array<DialogType>\r\n\tcurrentDialog: string | null\r\n\tsendMsg: (msgText: string) => void\r\n\tsetCurDlg: (dialog: string | null) => void\r\n}\r\n\r\nconst Dialogs: React.FC<PropsType> = (props) => {\r\n\r\n\tlet dialogs = props.dialogsPage;\r\n\tlet curDlg = props.currentDialog;\r\n\tlet curDlgBlock = React.useRef<HTMLDivElement>(null);\r\n\tlet sendMsgBtn = React.createRef<HTMLButtonElement>();\r\n\tlet newMsgField = React.useRef<HTMLTextAreaElement>(null);\r\n\tlet enterKeyDown = false;\r\n\r\n\tlet onSendMsg = () => {\r\n\t\tlet msgTextField = newMsgField.current;\r\n\t\tif (msgTextField) {\r\n\t\t\tprops.sendMsg(msgTextField.value);\r\n\t\t\tmsgTextField.value = '';\r\n\t\t\tmsgTextField.focus();\r\n\t\t}\r\n\t}\r\n\r\n\tlet onEnterKeyDown = (e: KeyboardEvent) => {\r\n\t\tif (e.code == 'Enter' && sendMsgBtn.current\r\n\t\t\t&& !sendMsgBtn.current.disabled && !enterKeyDown\r\n\t\t\t&& document.activeElement == newMsgField.current) {\r\n\t\t\te.preventDefault();\r\n\t\t\tenterKeyDown = true;\r\n\t\t\tsetTimeout(() => {\r\n\t\t\t\tonSendMsg();\r\n\t\t\t}, 3);\r\n\t\t\t// onSendMsg();\r\n\t\t}\r\n\t}\r\n\r\n\tlet onEnterKeyUp = (e: KeyboardEvent) => {\r\n\t\tif (e.code == 'Enter' && sendMsgBtn.current && !sendMsgBtn.current.disabled\r\n\t\t\t&& enterKeyDown && document.activeElement == newMsgField.current) {\r\n\t\t\tenterKeyDown = false;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tuseEffect(() => {\r\n\t\tdocument.addEventListener('keydown', onEnterKeyDown)\r\n\t});\r\n\r\n\tuseEffect(() => {\r\n\t\tdocument.addEventListener('keyup', onEnterKeyUp)\r\n\t});\r\n\r\n\tuseLayoutEffect(() => {\r\n\t\tif (curDlg && curDlgBlock.current) {\r\n\t\t\tcurDlgBlock.current.scrollTop = curDlgBlock.current.scrollHeight;\r\n\t\t}\r\n\t})\r\n\r\n\tlet onSetCurDlg = (e: MouseEvent<HTMLAnchorElement>) => {\r\n\t\tlet dlg = (e.currentTarget as HTMLAnchorElement).textContent;\r\n\t\tprops.setCurDlg(dlg);\r\n\t}\r\n\r\n\ttype DialogItemProps = {\r\n\t\tname: string\r\n\t\tid: number\r\n\t\tava: string\r\n\t\tkey: number\r\n\t}\r\n\r\n\r\n\tconst DialogItem: React.FC<DialogItemProps> = (props) => {\r\n\t\tlet path = `/dialogs/${props.id}`;\r\n\r\n\t\treturn (\r\n\t\t\t<li className={classes.dialog} >\r\n\t\t\t\t<NavLink to={path} activeClassName={classes.active} onClick={onSetCurDlg}>\r\n\t\t\t\t\t<img src={props.ava} className={classes.dialog__img} />\r\n\t\t\t\t\t{props.name}\r\n\t\t\t\t</NavLink>\r\n\t\t\t</li>\r\n\t\t)\r\n\t}\r\n\r\n\r\n\tlet dialogsBlock = dialogs\r\n\t\t.map((dialog) => <DialogItem name={dialog.name} id={dialog.id} ava={dialog.ava} key={dialog.id} />)\r\n\r\n\r\n\ttype MsgProps = {\r\n\t\tmsgs: string\r\n\t\tstyle: boolean\r\n\t\tkey: number\r\n\t}\r\n\t\r\n\tlet Msg: React.FC<MsgProps> = (props) => {\r\n\t\tlet style = props.style ? classes.outgoing : classes.incoming;\r\n\r\n\t\treturn (\r\n\t\t\t<div className={style}>{props.msgs}</div>\r\n\t\t)\r\n\t}\r\n\r\n\r\n\tlet MsgElements = curDlg ?\r\n\t\tdialogs\r\n\t\t\t.filter(dialog => dialog.name == curDlg)[0].msgs\r\n\t\t\t.map(msg => <Msg msgs={msg.text} style={msg.out} key={msg.id} />)\r\n\t\t: null;\r\n\r\n\r\n\tlet Messages = () => {\r\n\t\treturn (\r\n\t\t\t<div className={classes.messages} ref={curDlgBlock}>\r\n\t\t\t\t{MsgElements}\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n\r\n\tlet EmptyMessagesDiv = () => {\r\n\t\treturn (\r\n\t\t\t<div className={classes.fullHeightMessages}>\r\n\t\t\t\t<div className={classes.noDlg}>\r\n\t\t\t\t\t<p>Диалог не выбран</p>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n\r\n\r\n\ttype MessageItemsProps = {\r\n\t\tpath: number\r\n\t\tcomponent: ReturnType<React.FC>\r\n\t\tkey: number\r\n\t}\r\n\r\n\tlet MessageItems: React.FC<MessageItemsProps> = (props) => {\r\n\t\tlet path = `/dialogs/${props.path}`;\r\n\t\tlet component = () => props.component;\r\n\r\n\t\treturn (\r\n\t\t\t<Route path={path} render={component} />\r\n\t\t)\r\n\t}\r\n\r\n\tlet messagesBlock = !curDlg ? <EmptyMessagesDiv />\r\n\t\t: dialogs.map((dialog) => <MessageItems path={dialog.id} component={<Messages />} key={dialog.id} />)\r\n\r\n\r\n\tconst DialogForm = () => {\r\n\t\treturn (\r\n\t\t\t<Formik\r\n\t\t\t\tinitialValues={{ msgText: '' }}\r\n\t\t\t\tonSubmit={(values, { setSubmitting, resetForm }) => {\r\n\t\t\t\t\tconsole.log('msg sent')\r\n\t\t\t\t}}\r\n\t\t\t>\r\n\t\t\t\t{({\r\n\t\t\t\t\tvalues,\r\n\t\t\t\t\terrors,\r\n\t\t\t\t\ttouched,\r\n\t\t\t\t\thandleChange,\r\n\t\t\t\t\thandleBlur,\r\n\t\t\t\t\thandleSubmit,\r\n\t\t\t\t\tisSubmitting\r\n\t\t\t\t}) => (\r\n\t\t\t\t\t<form className={classes.writeMsg}>\r\n\r\n\t\t\t\t\t\t<textarea\r\n\t\t\t\t\t\t\tname={'msgText'}\r\n\t\t\t\t\t\t\tid={'msgText'}\r\n\t\t\t\t\t\t\tplaceholder={\"write message text\"}\r\n\t\t\t\t\t\t\tonChange={handleChange}\r\n\t\t\t\t\t\t\tonBlur={handleBlur}\r\n\t\t\t\t\t\t\tvalue={(values.msgText).startsWith('\\n') ? '' : values.msgText}\r\n\t\t\t\t\t\t\t// className={touched.name && errors.name ? classes.test : null}\r\n\t\t\t\t\t\t\tclassName={classes.writeMsgText}\r\n\t\t\t\t\t\t\tref={newMsgField}\r\n\t\t\t\t\t\t\tautoFocus\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t<button type={'submit'} className={classes.writeMsgBtn} ref={sendMsgBtn}\r\n\t\t\t\t\t\t\tdisabled={isSubmitting || values.msgText == '' || !(values.msgText).match(/\\S/g)}\r\n\t\t\t\t\t\t\tonClick={onSendMsg}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\tSend\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t</form>\r\n\t\t\t\t)}\r\n\t\t\t</Formik>\r\n\t\t)\r\n\t}\r\n\r\n\r\n\treturn (\r\n\t\t<div className={classes.commonWrap}>\r\n\t\t\t<div className={classes.dialogsWrap}>\r\n\t\t\t\t<ul className={classes.dialogs}>\r\n\t\t\t\t\t{dialogsBlock}\r\n\t\t\t\t</ul>\r\n\t\t\t</div>\r\n\t\t\t<div className={classes.messagesWrap}>\r\n\t\t\t\t{messagesBlock}\r\n\t\t\t\t{curDlg && <DialogForm />}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Dialogs;","import React from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { AppStateType } from '../redux/redux-store';\r\n\r\nlet mapStatetoPropsForRedirect = (state: AppStateType) => ({\r\n\tisAuth: state.auth.isAuth\r\n})\r\n\r\ntype MapStateType = {\r\n\tisAuth: boolean\r\n}\r\n\r\ntype DispatchPropsType = {\r\n\r\n}\r\n\r\nexport function withAuthRedirect<PropsType>(Component: React.ComponentType<PropsType>) {\r\n\tconst RedirectComponent: React.FC<DispatchPropsType & MapStateType> = (props) => {\r\n\t\t\r\n\t\t// render() {\r\n\t\t\tlet { isAuth, ...restProps } = props\r\n\t\t\tif (!isAuth) return <Redirect to='/login' />\r\n\t\treturn <Component {...restProps as  PropsType}/>\r\n\t\t// }\r\n\t}\r\n\r\n\tlet connectAuthRedirectComponent = connect<MapStateType, DispatchPropsType, PropsType, AppStateType>(\r\n\t\tmapStatetoPropsForRedirect, {})\r\n\t\t(RedirectComponent)\r\n\treturn connectAuthRedirectComponent;\r\n}","import React from 'react';\r\nimport { sendMessageAC, setCurrentDialogAC } from '../../redux/dialogs-reducer';\r\nimport Dialogs from './Dialogs';\r\nimport { connect } from 'react-redux';\r\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect';\r\nimport { compose } from 'redux';\r\nimport { AppStateType } from '../../redux/redux-store';\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n\t\r\n\treturn {\r\n\t\tdialogsPage: state.dialogsPage.dialogs,\r\n\t\tcurrentDialog: state.dialogsPage.currentDialog,\r\n\t}\r\n}\r\n\r\n\r\nexport default compose(\r\n\tconnect(mapStateToProps, {\r\n\t\tsendMsg: sendMessageAC,\r\n\t\tsetCurDlg: setCurrentDialogAC\r\n\t}),\r\n\twithAuthRedirect\r\n)(Dialogs) as React.ComponentType\r\n\r\n"],"sourceRoot":""}
{"version":3,"sources":["components/Profile/Profile.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/ProfileStatusWithHooks.tsx","components/Profile/ProfileDataForm.tsx","components/Profile/ProfileInfo.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["module","exports","Post","props","className","classes","item","item__imgAndText","item__img","src","ava","item__msg","message","item__likes","isLiked","likedSymbol","notLikedSymbol","onClick","e","PostId","target","id","addLike","likes","MyPosts","posts","profilePage","profile","PostItem","postsElements","map","post","msg","photos","small","likedByMe","newPost","React","createRef","onAddPost","newPostCurrent","current","addPost","value","PostForm","initialValues","postText","onSubmit","values","setSubmitting","resetForm","console","log","handleChange","errors","touched","handleBlur","handleSubmit","isSubmitting","name","placeholder","onChange","onBlur","textarea","ref","addPostBtn","disabled","match","content","addNP","MyPostsContainer","connect","state","addPostActionCreator","addLikeAC","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","statusTextarea","autoFocus","currentTarget","updateStatus","maxLength","ProfileDataForm","saveProfile","deactivateEditMode","userId","aboutMe","fullName","lookingForAJobDescription","lookingForAJob","contacts","dirty","ProfileDataFormTextarea","type","checked","ProfileDataFormHead","Object","keys","key","ProfileDataFormInput","changeInfo","ProfileInfo","Contact","contactTitle","contactValue","Contacts","entries","ProfileData","aboutUser","aboutUserContactsTitle","isOwner","activateEditMode","infoWrapper","userAvaAndStatus","userAvaWrap","userAva","large","MishaAva","changePhoto","htmlFor","files","savePhoto","userContacts","Profile","profile__content","Preloader","ProfileContainer","this","params","authorizedUserId","history","push","getUserAccountById","getStatus","renderProfile","prevProps","PureComponent","compose","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/3.58aad62f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile__content\":\"Profile_profile__content__23Xr3\",\"infoWrapper\":\"Profile_infoWrapper__VbTh7\",\"userContacts\":\"Profile_userContacts__t_4WV\",\"userAvaAndStatus\":\"Profile_userAvaAndStatus__3FbIZ\",\"userAvaWrap\":\"Profile_userAvaWrap__NJqr4\",\"userAva\":\"Profile_userAva__mqhUE\",\"changeInfo\":\"Profile_changeInfo__2rKMq\",\"changePhoto\":\"Profile_changePhoto__3j9Vd\",\"ProfileDataForm\":\"Profile_ProfileDataForm__IiOiu\",\"statusTextarea\":\"Profile_statusTextarea__1IpvX\",\"ProfileDataFormTextarea\":\"Profile_ProfileDataFormTextarea__3lfsP\",\"ProfileDataFormHead\":\"Profile_ProfileDataFormHead__eHG_h\",\"ProfileDataFormInput\":\"Profile_ProfileDataFormInput__1a-pq\",\"aboutUser\":\"Profile_aboutUser__3mEUW\",\"aboutUserContactsTitle\":\"Profile_aboutUserContactsTitle__20Jl-\",\"status\":\"Profile_status__3cJsh\",\"right\":\"Profile_right__1UFVW\",\"error\":\"Profile_error__2oVei\",\"wrongData\":\"Profile_wrongData__36HHh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"addPost\":\"MyPosts_addPost__2aGMO\",\"addNP\":\"MyPosts_addNP__1XqEa\",\"newPost\":\"MyPosts_newPost__2z_uy\",\"textarea\":\"MyPosts_textarea__J-kFR\",\"addPostBtn\":\"MyPosts_addPostBtn__10c3_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__3sC9V\",\"item__imgAndText\":\"Post_item__imgAndText__zBgHD\",\"item__img\":\"Post_item__img__2mrai\",\"item__msg\":\"Post_item__msg__3Kp2m\",\"likedSymbol\":\"Post_likedSymbol__X_12B\",\"notLikedSymbol\":\"Post_notLikedSymbol__1jT_x\",\"item__likes\":\"Post_item__likes__18qOt\"};","import React, {MouseEvent} from 'react';\r\nimport classes from './Post.module.css';\r\n\r\ntype PropsType = {\r\n\tmessage: string\r\n\tlikes: number\r\n\tava: string\r\n\tkey: number\r\n\tid: number\r\n\tisLiked: boolean\r\n\taddLike: (likedPostId: number) => void\r\n}\r\n\r\nconst Post: React.FC<PropsType> = (props) => {\r\n\t\r\n\tlet onLikePush = (e: MouseEvent<HTMLSpanElement>) => {\r\n\r\n\t\tlet PostId = (e.target as HTMLSpanElement).id\r\n\t\t{/* let PostId = e.target.id; */}\r\n\t\tprops.addLike(+PostId);\r\n\t}\r\n\r\n\t\treturn (\r\n\t\t<div className={classes.item}>\r\n\t\t\t<div className={classes.item__imgAndText}>\r\n\t\t\t\t<img className={classes.item__img} src={props.ava} />\r\n\t\t\t\t<div className={classes.item__msg}>\r\n\t\t\t\t\t{props.message}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<div className={classes.item__likes}>\r\n\t\t\t\t<span\r\n\t\t\t\t\tclassName={props.isLiked ? classes.likedSymbol : classes.notLikedSymbol}\r\n\t\t\t\t\tonClick={onLikePush} id={`${props.id}`}\r\n\t\t\t\t>\r\n\t\t\t\t\t\t&#9829; {props.likes ? props.likes : 'like'}\r\n\t\t\t\t</span>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport classes from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\nimport { Formik } from 'formik';\r\nimport { ProfileType, PostType } from '../../../redux/types/types';\r\n\r\ntype ProfilePagePropsType = {\r\n\tprofile: ProfileType\r\n\tstatus: string\r\n\tposts: Array<PostType>\r\n}\r\n\r\n\r\ntype PropsType = {\r\n\tprofilePage: ProfilePagePropsType\r\n\taddPost: (postText: string) => void\r\n\taddLike: (likedPostId: number) => void\r\n}\r\n\r\nconst MyPosts: React.FC<PropsType> = (props) => {\r\n\t\r\n\tlet posts = props.profilePage.posts;\r\n\tlet profile = props.profilePage.profile;\r\n\r\n\ttype PostItemPropsType = {\r\n\t\tmessage: string\r\n\t\tlikes: number\r\n\t\tava: string\r\n\t\tkey: number\r\n\t\tid: number\r\n\t\tisLiked: boolean\r\n\t\taddLike: (likedPostId: number) => void\r\n\t}\r\n\r\n\tconst PostItem: React.FC<PostItemPropsType> = (props) => {\r\n\r\n\t\treturn (\r\n\t\t\t<Post\r\n\t\t\t\tmessage={props.message} likes={props.likes} ava={props.ava} key={props.id}\r\n\t\t\t\tisLiked={props.isLiked} addLike={props.addLike} id={props.id}\r\n\t\t\t/>\r\n\t\t)\r\n\t}\r\n\r\n\r\n\tlet postsElements = posts\r\n\t\t.map((post) => <PostItem\r\n\t\t\tmessage={post.msg} likes={post.likes} ava={profile.photos.small as string}\r\n\t\t\tkey={post.id} id={post.id} isLiked={post.likedByMe} addLike={props.addLike}\r\n\t\t/>)\r\n\r\n\t\t\r\n\tlet newPost = React.createRef<HTMLTextAreaElement>();\r\n\r\n\tlet onAddPost = () => {\r\n\t\tlet newPostCurrent = newPost.current;\r\n\t\tif (newPostCurrent) {\r\n\t\t\tprops.addPost(newPostCurrent.value);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tconst PostForm = () => {\r\n\t\treturn (\r\n\t\t\t<Formik\r\n\t\t\t\tinitialValues={{ postText: '' }}\r\n\t\t\t\tonSubmit={(values, { setSubmitting, resetForm }) => {\r\n\t\t\t\t\tconsole.log('submit')\r\n\t\t\t\t}}\r\n\t\t\t>\r\n\t\t\t\t{({\r\n\t\t\t\t\tvalues,\r\n\t\t\t\t\terrors,\r\n\t\t\t\t\ttouched,\r\n\t\t\t\t\thandleChange,\r\n\t\t\t\t\thandleBlur,\r\n\t\t\t\t\thandleSubmit,\r\n\t\t\t\t\tisSubmitting\r\n\t\t\t\t}) => (\r\n\t\t\t\t\t<form className={classes.addPost}>\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t<textarea\r\n\t\t\t\t\t\t\tname={'postText'}\r\n\t\t\t\t\t\t\tid={'postText'}\r\n\t\t\t\t\t\t\tplaceholder={\"write some text\"}\r\n\t\t\t\t\t\t\tonChange={handleChange}\r\n\t\t\t\t\t\t\tonBlur={handleBlur}\r\n\t\t\t\t\t\t\tvalue={values.postText}\r\n\t\t\t\t\t\t\t// className={touched.name && errors.name ? classes.test : null}\r\n\t\t\t\t\t\t\tclassName={classes.textarea}\r\n\t\t\t\t\t\t\tref={newPost}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t<button className={classes.addPostBtn}\r\n\t\t\t\t\t\t\tdisabled={values.postText == '' || !(values.postText).match(/\\S/g)}\r\n\t\t\t\t\t\t\tonClick={onAddPost}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\tAdd Post\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t</form>\r\n\t\t\t\t)}\r\n\t\t\t\r\n\t\t\t</Formik>\r\n\t\t)\r\n\t}\r\n\r\n\r\n\r\n\treturn (\r\n\t\t<div className={classes.content}>\r\n\t\t\t<div>\r\n\t\t\t\t<div className={classes.addNP}>add new post</div>\r\n\t\t\t\t<PostForm/>\r\n\t\t\t</div>\r\n\t\t\t<div className={classes.posts}>\r\n\t\t\t\t<h3 className={classes.newPost}>My posts</h3>\r\n\t\t\t\t{postsElements}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default MyPosts as React.FC;","import React from 'react';\r\nimport MyPosts from './MyPosts';\r\nimport { addPostActionCreator, addLikeAC } from '../../../redux/profile-reducer';\r\nimport { connect } from 'react-redux';\r\nimport { AppStateType } from '../../../redux/redux-store';\r\nimport { ProfileType, PostType } from '../../../redux/types/types';\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n\treturn {\r\n\t\tprofilePage: state.profilePage,\r\n\r\n\t}\r\n}\r\n\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, {\r\n\taddPost: addPostActionCreator, addLike: addLikeAC\r\n})(MyPosts);\r\n\r\nexport default MyPostsContainer;","import React, {useState, useEffect, ChangeEvent} from 'react';\r\nimport classes from './Profile.module.css';\r\n\r\n\r\ntype PropsType = {\r\n\tstatus: string\r\n\tupdateStatus: (status: string) => void\r\n}\r\n\r\n\r\nconst ProfileStatusWithHooks: React.FC<PropsType> = (props) => {\r\n\r\n\tlet [editMode, setEditMode] = useState(false);\r\n\tlet [status, setStatus] = useState(props.status);\r\n\r\n\tuseEffect(() => {\r\n\t\tsetStatus(props.status)\r\n\t}, [props.status])\r\n\r\n\tconst activateEditMode = () => {\r\n\t\tsetEditMode(true);\r\n\t}\r\n\r\n\tconst deactivateEditMode = () => {\r\n\t\tsetEditMode(false);\r\n\t\tprops.updateStatus(status);\r\n\t}\r\n\r\n\tconst onStatusChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n\t\tsetStatus(e.currentTarget.value)\r\n\t\t\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className={classes.status}>\r\n\t\t\t{!editMode && \r\n\t\t\t\t<div>\r\n\t\t\t\t\t<span onDoubleClick={activateEditMode}>\r\n\t\t\t\t\t\t{props.status || 'no status'}\r\n\t\t\t\t\t</span>\r\n\t\t\t\t</div>\r\n\t\t\t}\r\n\t\t\t{editMode &&\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<textarea\r\n\t\t\t\t\t\tclassName={classes.statusTextarea} autoFocus={true} onChange={onStatusChange}\r\n\t\t\t\t\t\tonBlur={deactivateEditMode} value={status} maxLength={80}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t}\r\n\t\t</div>\r\n\t)\r\n} \r\n\r\n\r\nexport default ProfileStatusWithHooks;","import React, { useState, useEffect } from 'react';\r\nimport { Formik } from 'formik';\r\nimport classes from './Profile.module.css';\r\nimport { ProfileType, ContactsType } from '../../redux/types/types';\r\n\r\n\r\n// type ProfileToSaveType = {\r\n// \taboutMe: string\r\n// \tfullName: string\r\n// \tlookingForAJobDescription: string\r\n// \tlookingForAJob: boolean\r\n// \tcontacts: ContactsType\r\n// }\r\n\r\ntype PropsType = {\r\n\tprofile: ProfileType\r\n\tsaveProfile: (profile: ProfileType) => void\r\n\tdeactivateEditMode: () => void\r\n}\r\n// profile = { props.profile } saveProfile = { props.saveProfile } deactivateEditMode = { deactivateEditMode }\r\n\r\nconst ProfileDataForm: React.FC<PropsType> = ({ profile, saveProfile, deactivateEditMode }) => {\r\n\r\n\treturn (\r\n\t\t<Formik\r\n\t\t\tinitialValues={{\r\n\t\t\t\tuserId: profile.userId,\r\n\t\t\t\tphotos: profile.photos,\r\n\t\t\t\taboutMe: profile.aboutMe,\r\n\t\t\t\tfullName: profile.fullName,\r\n\t\t\t\tlookingForAJobDescription: profile.lookingForAJobDescription,\r\n\t\t\t\tlookingForAJob: profile.lookingForAJob,\r\n\t\t\t\tcontacts: profile.contacts\r\n\t\t\t}}\r\n\t\t\tonSubmit={(values, { setSubmitting, resetForm }) => {\r\n\t\t\t\tsetSubmitting(true);\r\n\t\t\t\tsaveProfile(values);\r\n\t\t\t\tdeactivateEditMode();\r\n\t\t\t\tsetSubmitting(false);\r\n\t\t\t}}\r\n\t\t>\r\n\t\t\t{({\r\n\t\t\t\tvalues,\r\n\t\t\t\terrors,\r\n\t\t\t\ttouched,\r\n\t\t\t\tdirty,\r\n\t\t\t\thandleChange,\r\n\t\t\t\thandleBlur,\r\n\t\t\t\thandleSubmit,\r\n\t\t\t\tisSubmitting\r\n\t\t\t}) => (\r\n\t\t\t\t<form onSubmit={handleSubmit} className={classes.ProfileDataForm}>\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<textarea className={classes.ProfileDataFormTextarea}\r\n\t\t\t\t\t\t\tname={'aboutMe'} id={'aboutMe'} placeholder={\"write some info about you\"}\r\n\t\t\t\t\t\t\tonChange={handleChange} onBlur={handleBlur} value={values.aboutMe}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<textarea className={classes.ProfileDataFormTextarea}\r\n\t\t\t\t\t\t\tname={'fullName'} id={'fullName'} placeholder={\"enter you name and surname\"}\r\n\t\t\t\t\t\t\tonChange={handleChange} onBlur={handleBlur} value={values.fullName}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<textarea className={classes.ProfileDataFormTextarea}\r\n\t\t\t\t\t\t\tname={'lookingForAJobDescription'} id={'lookingForAJobDescription'} placeholder={\"discribe your skills\"}\r\n\t\t\t\t\t\t\tonChange={handleChange} onBlur={handleBlur} value={values.lookingForAJobDescription}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\ttype={\"checkbox\"} name={'lookingForAJob'} id={'lookingForAJob'}\r\n\t\t\t\t\t\tonChange={handleChange} checked={values.lookingForAJob}\r\n\t\t\t\t\t/> looking for a job\r\n\r\n\t\t\t\t\t<p className={classes.ProfileDataFormHead}><b>CONTACTS:</b></p>\r\n\r\n\t\t\t\t\t{(Object.keys(profile.contacts) as Array<keyof typeof profile.contacts>)\r\n\t\t\t\t\t\t// .filter(key => profile[key as keyof ProfileType] !== 'photos' && profile[key as keyof ProfileType] !== 'userId')\r\n\t\t\t\t\t\t.map((key) => {\r\n\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t<div key={key}>\r\n\t\t\t\t\t\t\t\t\t<span>{key}:</span>\r\n\t\t\t\t\t\t\t\t\t<input type={'url'} className={classes.ProfileDataFormInput}\r\n\t\t\t\t\t\t\t\t\t\tname={'contacts.' + key} id={'contacts.' + key}\r\n\t\t\t\t\t\t\t\t\t\tonChange={handleChange} onBlur={handleBlur} value={values.contacts[key]}\r\n\t\t\t\t\t\t\t\t\t\t// вроде еще можно убрать as Array<keyof typeof profile.contacts>\r\n\t\t\t\t\t\t\t\t\t\t// и добавить values.contacts[key as keyof ContactsType]\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t})}\r\n\r\n\t\t\t\t\t<button className={classes.changeInfo} type={'submit'}>Save</button>\r\n\r\n\t\t\t\t</form>\r\n\t\t\t)}\r\n\t\t</Formik>\r\n\t)\r\n}\r\n\r\nexport default ProfileDataForm;","import React, { useState, ChangeEvent} from 'react';\r\nimport classes from './Profile.module.css';\r\nimport ProfileStatusWithHooks from './ProfileStatusWithHooks';\r\nimport MishaAva from '../Users/img/MishaAva.jpg';\r\nimport ProfileDataForm from './ProfileDataForm';\r\nimport { ProfileType, ContactsType } from '../../redux/types/types';\r\n\r\ntype PropsType = {\r\n\tprofile: ProfileType\r\n\tstatus: string\r\n\tupdateStatus: (status: string) => void\r\n\tisOwner: boolean\r\n\tsavePhoto: (file: File) => void\r\n\tsaveProfile: (profile: ProfileType) => void\r\n}\r\n\r\n\r\nconst ProfileInfo: React.FC<PropsType> = (props) => {\r\n\r\n\tconst onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n\t\tif (e.target.files) {\r\n\t\t\tprops.savePhoto(e.target.files[0]);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tlet [editMode, setEditMode] = useState(false);\r\n\r\n\tconst activateEditMode = () => {\r\n\t\tsetEditMode(true);\r\n\t}\r\n\r\n\tconst deactivateEditMode = () => {\r\n\t\tsetEditMode(false);\r\n\t}\r\n\r\n\ttype ContactPropsType = {\r\n\t\tkey: string\r\n\t\tcontactTitle: string\r\n\t\tcontactValue: string\r\n\t}\r\n\r\n\t\r\n\tconst Contact: React.FC<ContactPropsType> = (props)  => {\r\n\t\treturn <div><b><i>{props.contactTitle}:</i></b> {props.contactValue}</div>\r\n\t}\r\n\r\n\tconst Contacts = Object.entries(props.profile.contacts).map(([key, value]) => {\r\n\t\treturn <Contact key={key} contactTitle={key} contactValue={value} />\r\n\t})\r\n\r\n\ttype ProfileDataPropsType = {\r\n\t\tprofile: ProfileType\r\n\t\tisOwner: boolean\r\n\t\tactivateEditMode: () => void\r\n\t}\r\n\r\n\r\n\tconst ProfileData: React.FC<ProfileDataPropsType> = (props) => {\r\n\t\treturn (\r\n\t\t\t<div className={classes.aboutUser}>\r\n\t\t\t\t<div><b>about user:</b> {props.profile.aboutMe}</div>\r\n\t\t\t\t<div><b>full name:</b> {props.profile.fullName}</div>\r\n\t\t\t\t<div><b>skills:</b> {props.profile.lookingForAJobDescription}</div>\r\n\t\t\t\t<div><b>looking for a job:</b> {props.profile.lookingForAJob? 'yes' : 'no'}</div>\r\n\t\t\t\t<p className={classes.aboutUserContactsTitle}><b>CONTACTS:</b></p>\r\n\t\t\t\t{Contacts}\r\n\t\t\t\t{props.isOwner && <button className={classes.changeInfo} onClick={props.activateEditMode}>edit</button>}\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n\t\t\r\n\r\n\treturn (\r\n\t\t<div className={classes.infoWrapper}>\r\n\t\t\t<div className={classes.userAvaAndStatus}>\r\n\t\t\t\t<div className={classes.userAvaWrap}>\r\n\t\t\t\t\t<img className={classes.userAva} src={props.profile.photos.large ? props.profile.photos.large : MishaAva} />\r\n\t\t\t\t</div>\r\n\t\t\t\t{\r\n\t\t\t\t\tprops.isOwner &&\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<label className={classes.changePhoto} htmlFor={'inputFile'}>\r\n\t\t\t\t\t\t\t<span>change photo</span>\r\n\t\t\t\t\t\t\t<input type={'file'} onChange={onMainPhotoSelected} id={'inputFile'}/>\r\n\t\t\t\t\t\t</label>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t}\r\n\t\t\t\t\t<ProfileStatusWithHooks status={props.status} updateStatus={props.updateStatus} />\r\n\t\t\t</div>\r\n\t\t\t<div className={classes.userContacts}>\r\n\t\t\t\t{editMode\r\n\t\t\t\t\t? <ProfileDataForm profile={props.profile} saveProfile={props.saveProfile} deactivateEditMode={deactivateEditMode}/>\r\n\t\t\t\t\t: <ProfileData profile={props.profile} isOwner={props.isOwner} activateEditMode={activateEditMode} />\r\n\t\t\t\t}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default ProfileInfo;","import React, {useState, useEffect} from 'react';\r\nimport classes from './Profile.module.css';\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\r\nimport Preloader from '../common/Preloader';\r\nimport ProfileInfo from './ProfileInfo';\r\nimport { ProfileType } from '../../redux/types/types';\r\n\r\ntype PropsType = {\r\n\tprofile: ProfileType | null\r\n\tstatus: string\r\n\tupdateStatus: (status: string) => void\r\n\tisOwner: boolean\r\n\tsavePhoto: (file: File) => void\r\n\tsaveProfile: (profile: ProfileType) => void\r\n}\r\n\r\nconst Profile: React.FC<PropsType> = (props) => {\r\n\t// debugger\r\n\tif (!props.profile) return <Preloader />\r\n\r\n\r\n\treturn (\r\n\t\t<div className={classes.profile__content}>\r\n\t\t\t<ProfileInfo\r\n\t\t\t\tprofile={props.profile} isOwner={props.isOwner} savePhoto={props.savePhoto}\r\n\t\t\t\tstatus={props.status} updateStatus={props.updateStatus} saveProfile={props.saveProfile}\r\n\t\t\t/>\r\n\t\t\t{props.isOwner && <MyPostsContainer/>}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Profile;","import React, {PureComponent} from 'react';\r\nimport Profile from './Profile';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n\tgetUserAccountById, getStatus, updateStatus, savePhoto, saveProfile\r\n} from '../../redux/profile-reducer';\r\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\r\nimport { compose } from 'redux';\r\nimport { ProfileType } from '../../redux/types/types';\r\nimport { AppStateType } from '../../redux/redux-store';\r\n\r\n\r\ntype MapStateToPropsType = {\r\n\tprofile: ProfileType | null\r\n\tstatus: string\r\n\tauthorizedUserId: number | null\r\n\tisAuth: boolean\r\n}\r\n\r\ntype LocalPropsType = {\r\n\tuserId: string\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n\tgetUserAccountById: (id: number) => void\r\n\tgetStatus: (id: number) => void\r\n\tupdateStatus: (status: string) => void\r\n\tsavePhoto: (file: File) => void\r\n\tsaveProfile: (profile: ProfileType) => void\r\n}\r\n\r\ntype PropsType = MapStateToPropsType & MapDispatchToPropsType & AppStateType & RouteComponentProps<LocalPropsType>\r\n\r\nclass ProfileContainer extends PureComponent<PropsType> {\r\n\r\n\trenderProfile() {\r\n\t\t\tlet userId: number | null = +this.props.match.params.userId;\r\n\t\t\tif (!userId) {\r\n\t\t\t\tuserId = this.props.authorizedUserId;\r\n\t\t\t\tif (!userId) this.props.history.push('/login')\r\n\t\t\t}\r\n\t\t\tthis.props.getUserAccountById(userId as number)\r\n\t\t\tthis.props.getStatus(userId as number);\r\n\t}\r\n\t\r\n\tcomponentDidMount() {\r\n\t\tthis.renderProfile();\r\n\t}\r\n\r\n\tcomponentDidUpdate(prevProps: PropsType) {\r\n\t\tif (this.props.match.params.userId != prevProps.match.params.userId) {\r\n\t\t\t// console.log(this.props.match.params)\r\n\t\t\tthis.renderProfile();\r\n\t\t}\r\n\t}\r\n\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<Profile\r\n\t\t\t\t{...this.props}\r\n\t\t\t\tprofile={this.props.profile}\r\n\t\t\t\tstatus={this.props.status}\r\n\t\t\t\tupdateStatus={this.props.updateStatus}\r\n\t\t\t\tisOwner={!this.props.match.params.userId}\r\n\t\t\t\tsavePhoto={this.props.savePhoto}\r\n\t\t\t\tsaveProfile={this.props.saveProfile}\r\n\t\t\t/>\r\n\t\t)\r\n\t}\r\n\t\r\n}\r\n\r\nlet mapStatetoProps = (state: AppStateType): MapStateToPropsType => ({\r\n\tprofile: state.profilePage.profile,\r\n\tstatus: state.profilePage.status,\r\n\tauthorizedUserId: state.auth.userId,\r\n\tisAuth: state.auth.isAuth\r\n})\r\n\r\nexport default compose<React.ComponentType>(\r\n\tconnect<MapStateToPropsType, MapDispatchToPropsType, LocalPropsType, AppStateType>(mapStatetoProps, {\r\n\t\tgetUserAccountById, getStatus, updateStatus, savePhoto, saveProfile\r\n\t}),\r\n\twithRouter,\r\n\t// withAuthRedirect\r\n)(ProfileContainer)\r\n\r\n\r\n\r\n\r\n"],"sourceRoot":""}